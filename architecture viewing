{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOBSt1YBsNlYelao5XgNeGo"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":46},"id":"OpCjxXAmJcVh","executionInfo":{"status":"ok","timestamp":1705171992614,"user_tz":300,"elapsed":7795,"user":{"displayName":"Vineet Saravanan","userId":"08176219652230036367"}},"outputId":"feec60ad-f7d3-4353-a1ba-480cea67aa96"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"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\n"},"metadata":{}}],"source":["import pydot\n","from PIL import Image\n","import io\n","import matplotlib.pyplot as plt\n","\n","# Path to the uploaded file\n","file_path = '/content/network_architecture'\n","\n","# Read the file content\n","with open(file_path, 'r') as file:\n","    graph_data = file.read()\n","\n","# Use pydot to create a graph from the data\n","(graph,) = pydot.graph_from_dot_data(graph_data)\n","\n","# Convert graph to PNG image\n","png_image = graph.create_png()\n","\n","# Convert PNG image data to a PIL Image object\n","image = Image.open(io.BytesIO(png_image))\n","\n","# Display the image\n","plt.imshow(image)\n","plt.axis('off')\n","plt.show()"]}]}