{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"mount_file_id":"1-U97LSaDdhj3ORrt100-DRQkQwAxEJXI","authorship_tag":"ABX9TyM7fgG7tFePBWxHXfoXpSl9"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["!pip install pandas as pd"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"u7_i3ZGgLQ8p","executionInfo":{"status":"ok","timestamp":1702096657623,"user_tz":300,"elapsed":1805,"user":{"displayName":"Vineet Saravanan","userId":"08176219652230036367"}},"outputId":"292a35b1-e82c-4d1b-c45a-7ace5da43bf3"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: pandas in /usr/local/lib/python3.10/dist-packages (1.5.3)\n","\u001b[31mERROR: Could not find a version that satisfies the requirement as (from versions: none)\u001b[0m\u001b[31m\n","\u001b[0m\u001b[31mERROR: No matching distribution found for as\u001b[0m\u001b[31m\n","\u001b[0m"]}]},{"cell_type":"code","execution_count":25,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"J5d15PvRLP6h","executionInfo":{"status":"ok","timestamp":1702839388792,"user_tz":300,"elapsed":804,"user":{"displayName":"Vineet Saravanan","userId":"08176219652230036367"}},"outputId":"a9b79e34-68be-461f-d734-6b0473d60cf5"},"outputs":[{"output_type":"stream","name":"stdout","text":["194.csv\n","450.csv\n"]}],"source":["import pandas as pd\n","import os\n","\n","excel_folder = '/content/input'\n","# File names\n","# Get all Excel filenames\n","excel_files = [f for f in os.listdir(excel_folder) if f.endswith('.csv')]\n","\n","# Process each file\n","x=0\n","for filename in excel_files:\n","  try:\n","    input_csv_file = os.path.join(excel_folder, filename)\n","    output_csv_file = os.path.join('/content/output', filename)\n","\n","    # Read specific rows and columns from the CSV file\n","    # Adjusting the row selection for CSV (row index starts from 0)\n","    df = pd.read_csv(input_csv_file, usecols=[2, 3], header=None, skiprows=10, nrows=120)\n","\n","    # Transpose the dataframe\n","    transposed_df = df.T\n","\n","    # Save the transposed data to a new CSV file\n","    transposed_df.to_csv(output_csv_file, index=False, header = False)\n","  except:\n","    print(filename)"]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YydGPP413vBB","executionInfo":{"status":"ok","timestamp":1702835095969,"user_tz":300,"elapsed":2468,"user":{"displayName":"Vineet Saravanan","userId":"08176219652230036367"}},"outputId":"5a947797-02cc-4cbe-dbcd-20b5da9f39d7"},"execution_count":21,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","source":["def split_and_convert_tuple_columns(df):\n","    \"\"\"\n","    Adjusted function to split columns that have tuple-like values into separate columns,\n","    only if all elements of the tuple can be converted to floats.\n","    \"\"\"\n","    for col in df.columns:\n","        if df[col].dtype == object and df[col].str.startswith('(').any():\n","            # Attempt to split the tuple-like string and convert to float, skip if conversion fails\n","            try:\n","                new_cols = df[col].str.replace(r'[()]', '', regex=True).str.split(',', expand=True).astype(float)\n","\n","                # Rename new columns and insert them into the dataframe\n","                for i, new_col in enumerate(new_cols.columns):\n","                    new_col_name = f\"{col}_{i+1}\"\n","                    df.insert(df.columns.get_loc(col) + i + 1, new_col_name, new_cols[new_col])\n","\n","                # Drop the original column\n","                df.drop(columns=[col], inplace=True)\n","            except ValueError:\n","                # Skip conversion if not all elements can be converted to float\n","                continue\n","\n","    return df\n","\n","# Applying the adjusted function to the dataframe\n","df_transformed = split_and_convert_tuple_columns(df)\n","\n","# Display the transformed dataframe\n","df_transformed.head()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":249},"id":"TPJL7i2b3292","executionInfo":{"status":"ok","timestamp":1702837986250,"user_tz":300,"elapsed":3,"user":{"displayName":"Vineet Saravanan","userId":"08176219652230036367"}},"outputId":"5f11959c-6a35-44f8-9710-84a9cf640e9a"},"execution_count":23,"outputs":[{"output_type":"execute_result","data":{"text/plain":["         2                                                  3\n","0  Spacing  (0.41015624999999994, 0.41015624999999994, 0.5...\n","1     Size                                    (512, 512, 140)\n","2     Mean                              3.321511404854911e-05\n","3  Minimum                                                0.0\n","4  Maximum                                                1.0"],"text/html":["\n","  <div id=\"df-5708ecd8-5a04-41ad-a623-ee71c996f4ce\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>2</th>\n","      <th>3</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Spacing</td>\n","      <td>(0.41015624999999994, 0.41015624999999994, 0.5...</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Size</td>\n","      <td>(512, 512, 140)</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Mean</td>\n","      <td>3.321511404854911e-05</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Minimum</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Maximum</td>\n","      <td>1.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5708ecd8-5a04-41ad-a623-ee71c996f4ce')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-5708ecd8-5a04-41ad-a623-ee71c996f4ce button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-5708ecd8-5a04-41ad-a623-ee71c996f4ce');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-a5386c78-7c53-43b5-b977-430694030638\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a5386c78-7c53-43b5-b977-430694030638')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-a5386c78-7c53-43b5-b977-430694030638 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":23}]},{"cell_type":"code","source":["pip install Openpyxl"],"metadata":{"id":"MrjHYxbzpPEA"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import pandas as pd\n","import os\n","\n","def split_and_convert_tuple_columns(df):\n","    \"\"\"\n","    Function to split columns that have tuple-like values into separate columns,\n","    only if all elements of the tuple can be converted to floats.\n","    \"\"\"\n","    for col in df.columns:\n","        if df[col].dtype == object and df[col].str.startswith('(').any():\n","            # Attempt to split the tuple-like string and convert to float, skip if conversion fails\n","            try:\n","                new_cols = df[col].str.replace(r'[()]', '', regex=True).str.split(',', expand=True).astype(float)\n","\n","                # Rename new columns and insert them into the dataframe\n","                for i, new_col in enumerate(new_cols.columns):\n","                    new_col_name = f\"{col}_{i+1}\"\n","                    df.insert(df.columns.get_loc(col) + i + 1, new_col_name, new_cols[new_col])\n","\n","                # Drop the original column\n","                df.drop(columns=[col], inplace=True)\n","            except ValueError:\n","                # Skip conversion if not all elements can be converted to float\n","                continue\n","\n","    return df\n","\n","def combine_and_process_csv_files(input_folder, output_file_path):\n","    \"\"\"\n","    Combine and process all CSV files in the input folder and save the combined data into a single output file.\n","    \"\"\"\n","    combined_df = pd.DataFrame()\n","\n","    # Combine each CSV file in the input folder\n","    for filename in os.listdir(input_folder):\n","        if filename.endswith('.csv'):\n","            file_path = os.path.join(input_folder, filename)\n","            df = pd.read_csv(file_path)\n","            combined_df = pd.concat([combined_df, df], ignore_index=True)\n","\n","    # Process the combined dataframe\n","    combined_df_transformed = split_and_convert_tuple_columns(combined_df)\n","\n","    # Export the combined and transformed dataframe to the output CSV file\n","    combined_df_transformed.to_csv(output_file_path, index=False)\n","\n","    return output_file_path\n","\n","# Example usage\n","input_folder = '/content/output'  # Replace with your input folder path\n","output_file_path = '/content/output.csv'  # Replace with your desired output file path\n","\n","# Combine and process all CSV files into a single output file\n","processed_file_path = combine_and_process_csv_files(input_folder, output_file_path)\n","\n","print(f\"Combined and processed CSV file saved to: {processed_file_path}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2KgkOLOd5DeC","executionInfo":{"status":"ok","timestamp":1702839413925,"user_tz":300,"elapsed":1613,"user":{"displayName":"Vineet Saravanan","userId":"08176219652230036367"}},"outputId":"9489ef72-0658-4176-f9d0-50e0a45e6c98"},"execution_count":26,"outputs":[{"output_type":"stream","name":"stdout","text":["Combined and processed CSV file saved to: /content/output.csv\n"]}]}]}